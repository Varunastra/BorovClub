@page  "/{Username}"
@using BorovClub.Models;
@using BorovClub.Data;
@inject AccountService service;
@inject FriendshipService friendsService;

@if (user != null)
{
    <div class="profile">
        <div class="blue-container">

        </div>

        <div class="profile-avatar"><img src="@user.AvatarPath" /></div>

        <div class="white-container">
            <div class="short-summary">
                <div>@user.FirstName @user.LastName</div>
                <div>@user.UserName</div>
            </div>
            <hr class="details-separator"/>
            <div class="user-about">

            </div>
        </div>
        <AuthorizeView>
            <Authorized>
                <div class="user-friends">
                </div>
                <div class="actions-bar">
                    <div class="actions">
                        @if (Username != CurrentUser)
                        {
                            @switch (friendStatus)
                            {
                                case FriendshipStatus.NotExist:
                                    <div class="action">
                                        <button @onclick="@onAddClicked" class="action-button">Add Friend</button>
                                    </div>
                                    break;
                                case FriendshipStatus.Approved:
                                    <div class="action">
                                        <button @onclick="@onRemoveClicked" class="action-button">Remove Friend</button>
                                    </div>
                                    break;
                                case FriendshipStatus.Pending:
                                    <div class="action">
                                        <div class="requst-sent">Request Sent</div>
                                    </div>
                                    break;
                                default:
                                    break;
                            }
                            <div class="action">
                                <a href="@("messages/" + Username)" class="action-button">Send Message</a>
                            </div>
                            <div class="status-bar">

                            </div>
                        }
                    </div>
                </div>
            </Authorized>
        </AuthorizeView>
    </div>
}
else
{
    <h2>User Not Found</h2>
}

@code {
    [Parameter]
    public string Username { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> authState { get; set; }

    public string CurrentUser { get; set; }

    private ApplicationUser user;
    private FriendshipStatus friendStatus;

    protected override async Task OnInitializedAsync()
    {
        var state = await authState;
        CurrentUser = state.User.Identity.Name;
        user = service.GetUser(Username);
        if (user != null && CurrentUser != Username)
        {
            friendStatus = friendsService.GetFriendshipStatus(user);
        }
    }

    public async Task onAddClicked()
    {
        friendStatus = await friendsService.AddFriend(user);
        await InvokeAsync(() =>
            StateHasChanged()
        );
    }

    public async Task onRemoveClicked()
    {
        friendStatus = await friendsService.RemoveFriend(user);
        await InvokeAsync(() =>
            StateHasChanged()
        );
    }
}
