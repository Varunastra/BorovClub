@page "/login"
@using BorovClub.Models;
@using Microsoft.Extensions.Configuration;
@using BorovClub.Pages.Auth;

@inject AccountService service;
@inject IJSRuntime JsRuntime;
@inject NavigationManager navManager;
@inject IConfiguration configuration;

   @if (showNormal)
   {
    <div class="outer-container">
        <EditForm Model="@model"OnValidSubmit="@HandleValidSubmit" class="account-container">
            <div class="login-text">Login</div>
            <div><InputText class="login-input" @bind-Value="@model.UserName" /></div>
            <div class="login-password">Password</div>
            <div><InputText type="password" @bind-Value="@model.Password" /></div>
            <div><button type="submit">Login</button></div>
            @if (error)
            {
                <div class="validation-message">Wrong username or password</div>
            }
            <DataAnnotationsValidator />
            <ValidationSummary />
        </EditForm>
        <button @onclick="@GoogleAuth">Auth throught Google</button>
    </div>
   }
   else
   {
       <TotpAuth model="@model"/>
   }

@code {
    UserLogin model = new UserLogin();
    private string token;
    public bool error = false;
    private bool showNormal = true;

    private async void HandleValidSubmit()
    {
        await JsRuntime.InvokeVoidAsync("openLoadingModal");
        var authorizeMethod = await service.GetAuthorizeMethod(model);

        switch (authorizeMethod)
        {
            case AuthorizeMethod.Normal:
                {
                    token = await service.UserLogin(model);
                    if (token != null)
                    {
                        await JsRuntime.InvokeAsync<string>("setToken", token);
                    }
                    else
                    {
                        error = true;
                    }
                    break;
                }
            case AuthorizeMethod.TwoFactor:
                {
                    showNormal = false;
                    break;
                }
            case AuthorizeMethod.Error:
                {
                    error = true;
                    break;
                }

        }
        await JsRuntime.InvokeVoidAsync("closeLoadingModal");
        StateHasChanged();
    }

    void GoogleAuth()
    {
        var ClientID = configuration["Google:ClientID"];
        var ClientSecret = configuration["Google:ClientSecret"];
        navManager.NavigateTo($"https://accounts.google.com/o/oauth2/auth?client_id={ClientID}&response_type=code&scope=https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email&redirect_uri=https://borovclub.com/oauth");
    }

}
