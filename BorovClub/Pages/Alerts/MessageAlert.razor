@using BorovClub.Data;
@using BorovClub.Models;
@implements IDisposable;
@inject IJSRuntime JSruntime;
@inject NavigationManager navManager;
@inject ConnectionService connectionService;
@inject MessageService messageService;
@inject AlertService alertService;
@*@inject ConnectionManagerService connectionService;*@

@code {

    protected override void OnInitialized()
    {
        connectionService.AddConnection();
        connectionService.AddOn<Message>(OnMessageSent);
        connectionService.AddOn<Chat>(OnMessageChange);
    }

    private async Task OnMessageSent(Message message)
    {
        if (!navManager.Uri.Contains("/messages/" + message.Sender.UserName))
        {
            messageService.QueryMesssages[message.Sender.UserName] = message;
            await InvokeAsync(async () =>
            {
                alertService.ShowMessage(message, AlertType.Message, message.Text);
                StateHasChanged();
                await JSruntime.InvokeVoidAsync("playAlert");
            });
        }
    }

    private Task OnMessageChange(Chat chat)
    {
        messageService.QueryMesssages[chat.Sender.UserName] = chat.LastMessage;
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        connectionService.RemoveOn<Message>(OnMessageSent);
        connectionService.RemoveOn<Chat>(OnMessageChange);
        connectionService.RemoveConnection();
    }
}
